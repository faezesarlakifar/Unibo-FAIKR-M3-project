# -*- coding: utf-8 -*-
"""inference.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Dn9wMj5ibJXtp0jXKq_rz8fMSMkBUtRA
"""

import os
import pickle
import pandas as pd
from pgmpy.inference import VariableElimination

def load_model(model_name):
    script_dir = os.path.dirname(os.path.abspath(__file__))  # Directory of inference.py
    models_dir = os.path.join(script_dir, "..", "models")
    model_path = os.path.join(models_dir, f"{model_name}.pkl")

    try:
        with open(model_path, "rb") as f:
            model = pickle.load(f)
        return model
    except FileNotFoundError:
        print(f"Error: Model file '{model_path}' not found.")
        return None

def get_features(model_type):
    ai_features = ["HighBP", "GenHlth", "HighChol", "Age", "Sex", "Income", "DiffWalk", "BMI", "HeartDiseaseorAttack", "Education"]
    domain_features = ai_features + ["Fruits"]
    return ai_features if model_type == "AI" else domain_features

def get_model_name(option):
    model_mapping = {"A": "best_model_as", "B": "best_model_domain_knowledge"}
    return model_mapping.get(option, None)

def categorize_age(age):
    if age < 18:
        return 0  # Underage
    elif age < 60:
        return 1  # Adult
    else:
        return 2  # Old

def categorize_bmi(bmi):
    if bmi < 18.5:
        return 0  # Underweight
    elif bmi < 25:
        return 1  # Normal
    else:
        return 2  # Fat

def get_feature_value(feature):
    feature_prompts = {
        "GenHlth": "Enter general health status (1: Excellent, 2: Very Good, 3: Good, 4: Fair, 5: Poor): ",
        "DiffWalk": "Do you have difficulty walking? (0: No, 1: Yes): ",
        "Sex": "Enter sex (0: Female, 1: Male): ",
        "Age": "Enter your age in number: ",
        "BMI": "Enter your BMI in number: ",
        "Education": "Enter education level (1: No school, 2: Elementary, 3: Some high school, 4: High school graduate, 5: Some college, 6: College graduate): ",
        "Income": "Enter income level (1: <10K, 2: 10K-15K, 3: 15K-20K, 4: 20K-25K, 5: 25K-35K, 6: 35K-50K, 7: 50K-75K, 8: 75K+): ",
        "Fruits": "Do you consume fruit daily? (0: No, 1: Yes): ",
        "HeartDiseaseorAttack": "Have you had heart disease or an attack? (0: No, 1: Yes): ",
        "HighChol": "Do you have high cholesterol? (0: No, 1: Yes): ",
        "HighBP": "Do you have high blood pressure? (0: No, 1: Yes): "
    }

    while True:
        try:
            value = float(input(feature_prompts[feature]))
            if feature == "Age":
                return categorize_age(value)
            elif feature == "BMI":
                return categorize_bmi(value)
            return int(value)
        except ValueError:
            print("Invalid input. Please enter a valid number.")

def main():
    option = input("Choose model (A for AI Model, B for Domain Knowledge Model): ").strip().upper()
    model_name = get_model_name(option)
    if model_name is None:
        print("Error: Invalid option selected.")
        return

    model = load_model(model_name)
    if model is None:
        return

    feature_names = get_features("AI" if option == "A" else "Domain")
    evidence = {feature: get_feature_value(feature) for feature in feature_names}

    try:
        inference = VariableElimination(model)
        result = inference.query(variables=["Diabetes_binary"], evidence=evidence)
        print("Inference result:", result)
    except Exception as e:
        print("Error during inference:", str(e))

if __name__ == "__main__":
    main()