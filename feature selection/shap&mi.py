# -*- coding: utf-8 -*-
"""SHAP&MI.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/18ubJVPGWAvgVIOQkntgs6MSV4WOR0EwS
"""

# @markdown Mount Google Drive
from google.colab import drive

drive.mount('/content/drive')

# @title Load Dataset
import pandas as pd

file_path = "/content/drive/My Drive/diabetes_indicators.csv"

df = pd.read_csv(file_path)
df = df.sample(frac=1, random_state=42).reset_index(drop=True)

df.head()

# @markdown Get Features
columns = df.columns

columns

df.info()

# @title Discretize Continuous Variables
df['BMI'] = pd.cut(df['BMI'], bins=3, labels=[0, 1, 2])  # Low, Medium, High
df['Age'] = pd.cut(df['Age'], bins=3, labels=[0, 1, 2])  # Young, Middle, Old
df['MentHlth'] = pd.cut(df['MentHlth'], bins=2, labels=[0, 1])  # Good, Bad
df['PhysHlth'] = pd.cut(df['PhysHlth'], bins=2, labels=[0, 1])  # Good, Bad

df.info()

"""# Feature Engineering

## Understanding Feature Contributions with SHAP
"""

import shap
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import xgboost as xgb
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler

# Enable SHAP JS visualization
shap.initjs()

# Convert categorical variables properly
for col in ['BMI', 'MentHlth', 'PhysHlth', 'Age']:
    df[col] = df[col].astype(float)

X = df.drop(columns=["Diabetes_binary"])
y = df["Diabetes_binary"]

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

scaler = StandardScaler()
X_train_scaled = scaler.fit_transform(X_train)
X_test_scaled = scaler.transform(X_test)

xgb_model = xgb.XGBClassifier(
    n_estimators=100,
    max_depth=5,
    learning_rate=0.1,
    tree_method="gpu_hist",
    random_state=42
)

print("Training XGBoost Model on GPU...")
xgb_model.fit(X_train, y_train)

# Compute SHAP Values
print("Computing SHAP values...")
explainer = shap.TreeExplainer(xgb_model, feature_perturbation="interventional")
shap_values = explainer.shap_values(X_test, check_additivity=False)

plt.figure(figsize=(10, 6))
shap.summary_plot(shap_values, X_test)
plt.show()

feature_importance = np.abs(shap_values).mean(axis=0)
 # Top 10 features
important_features = X_test.columns[np.argsort(-feature_importance)[:10]]

for feature in important_features:
    print(f"ðŸ“Š Plotting SHAP dependence for: {feature}")
    plt.figure(figsize=(8, 6))  # Create a new figure for each plot
    shap.dependence_plot(feature, shap_values, X_test)
    plt.show()

"""## Feature Selection using SHAP values"""

important_features_df = pd.DataFrame(important_features, columns=["Important Features"])
important_features_df.to_csv("important_features.csv", index=False)

print("âœ… Important features saved successfully!")
important_features

# @markdown Load important features
import pandas as pd

path = "/content/drive/My Drive/dataset_selected_features.csv"
important_features = pd.read_csv(path)

df_selected = important_features

important_features.head()

df_selected = df[important_features.tolist() + ["Diabetes_binary"]]

save_path = "/content/drive/My Drive/dataset_selected_features.csv"
df_selected.to_csv(save_path, index=False)
df_selected.to_csv('df_selected.csv', index=False)

print(f"âœ… Filtered dataset saved successfully to Google Drive: {save_path}")

df_selected.head()

"""## Feature Selection using Mutual Info"""

from sklearn.feature_selection import mutual_info_classif
import numpy as np

mi_scores = mutual_info_classif(df.drop(columns=["Diabetes_binary"]), df["Diabetes_binary"])

mi_scores_dict = dict(zip(df.columns[:-1], mi_scores))
sorted_features = sorted(mi_scores_dict, key=mi_scores_dict.get, reverse=True)

top_n = 10
selected_features_mi = sorted_features[:top_n]

df_selected_mi = df[selected_features_mi + ["Diabetes_binary"]]

print(f"âœ… Selected Features (Mutual Information): {selected_features_mi}")

save_path = "/content/drive/My Drive/dataset_selected_features_mi.csv"
df_selected_mi.to_csv(save_path, index=False)
df_selected_mi.to_csv('df_selected_mi.csv', index=False)

print(f"âœ… Filtered dataset saved successfully to Google Drive: {save_path}")

"""## Compare Selected Features"""

shap_top_features = important_features
mi_top_features = selected_features_mi

common_features = shap_top_features.intersection(mi_top_features)
print(f"ðŸ“Š Common Features: {common_features}")

!pip install -q matplotlib-venn

type(shap_top_features)

type(mi_top_features)

shap_features_set = set(shap_top_features)
mi_features_set = set(mi_top_features)

from matplotlib_venn import venn2
import matplotlib.pyplot as plt

common_features = shap_features_set & mi_features_set
shap_unique = shap_features_set - mi_features_set
mi_unique = mi_features_set - shap_features_set

plt.figure(figsize=(7,7))
venn = venn2([shap_features_set, mi_features_set], ("SHAP Selected", "Mutual Info Selected"))
plt.title("Overlap Between SHAP and Mutual Information Features")

venn.get_label_by_id("10").set_text("\n".join(shap_unique))  # SHAP only
venn.get_label_by_id("01").set_text("\n".join(mi_unique))  # Mutual Info only
venn.get_label_by_id("11").set_text("\n".join(common_features))  # Common features

plt.show()