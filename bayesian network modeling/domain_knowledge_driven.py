# -*- coding: utf-8 -*-
"""domain-knowledge-driven.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1OfW1H49aGldiwGW413pF_66wQxmOLPyK
"""

# @markdown Mount Google Drive
from google.colab import drive

drive.mount('/content/drive')

# @title Load Dataset
import pandas as pd

file_path = "/content/drive/My Drive/diabetes_indicators.csv"

df = pd.read_csv(file_path)
df = df.sample(frac=1, random_state=42).reset_index(drop=True)

df.head()

# @markdown Get Features
columns = df.columns

columns

# @title Discretize Continuous Variables
df['BMI'] = pd.cut(df['BMI'], bins=3, labels=[0, 1, 2])  # Low, Medium, High
df['Age'] = pd.cut(df['Age'], bins=3, labels=[0, 1, 2])  # Young, Middle, Old
df['MentHlth'] = pd.cut(df['MentHlth'], bins=2, labels=[0, 1])  # Good, Bad
df['PhysHlth'] = pd.cut(df['PhysHlth'], bins=2, labels=[0, 1])  # Good, Bad

"""# Design Bayesian Network Manually Based on Domain Knowledge (Literature)"""

from pgmpy.models import BayesianNetwork

bn = BayesianNetwork([
    # ("Smoker", "Age"),
    ("Age", "Diabetes_binary"),
    ("Age", "Education"),
    ("Income", "Diabetes_binary"),
    ("Education", "Diabetes_binary"),
    ("Education", "GenHlth"),
    ("GenHlth", "BMI"),
    ("GenHlth", "Diabetes_binary"),

    ("Sex", "Diabetes_binary"),
    ("Sex", "HighChol"),
    ("Sex", "BMI"),
    ("Sex", "HeartDiseaseorAttack"),
    # ("HighChol", "HighBP"),

    # Blood pressure, cholesterol & heart disease
    # ("Smoker", "HeartDiseaseorAttack"),
    ("Age", "HeartDiseaseorAttack"),
    ("HighBP", "HeartDiseaseorAttack"),
    ("HighBP", "Diabetes_binary"),
    ("Diabetes_binary", "HighChol"),
    ("HighChol", "HeartDiseaseorAttack"),

    # Age-related health risks
    ("Age", "HighBP"),
    ("Age", "HighChol"),

    # Heart disease & diabetes link
    # ("HeartDiseaseorAttack", "Diabetes_binary"),

    # Diet affecting BMI
    ("Fruits", "BMI"),
    # ("Veggies", "BMI"),
    ("Age", "BMI"),
    # ("PhysActivity", "BMI"),
    ("BMI", "Diabetes_binary"),

    # Lifestyle & physical health
    # ("DiffWalk", "PhysActivity"),
    ("DiffWalk", "BMI"),
    # ("PhysActivity", "Diabetes_binary"),
    ("Diabetes_binary", "HeartDiseaseorAttack"),

    # Healthcare access & diabetes
])

print("Final Bayesian Network defined successfully!")

# @title Plot Bayesian Network based on Domain Knowledge
import networkx as nx
import matplotlib.pyplot as plt
from networkx.drawing.nx_pydot import graphviz_layout

# Convert BN to a networkx graph
G = nx.DiGraph()
G.add_edges_from(bn.edges())

# Define Graphviz layout
pos = graphviz_layout(G, prog="neato")

# Draw the Bayesian Network
plt.figure(figsize=(10, 8))
# pos = nx.spring_layout(G, seed=42)  # Layout for better visualization
nx.draw(G, pos, with_labels=True, node_size=3200, node_color="lightblue", edge_color="gray", font_size=8, font_weight="bold")
plt.title("Bayesian Network Structure", fontsize=14)
plt.show()

# @title Plot with a Better View
import networkx as nx
import matplotlib.pyplot as plt
import pygraphviz as pgv
from networkx.drawing.nx_agraph import to_agraph

highlighted_node = "Diabetes_binary"

for node in G.nodes:
    if node == highlighted_node:
        G.nodes[node]["color"] = "black"
        G.nodes[node]["style"] = "filled"
        G.nodes[node]["fillcolor"] = "lightgreen"
        G.nodes[node]["fontcolor"] = "black"
    else:
        G.nodes[node]["color"] = "black"

# Convert NetworkX graph to PyGraphviz AGraph
A = to_agraph(G)

A.layout(prog="dot")

A.draw("bayesian_network_domain_knowledge_2.png")

plt.figure(figsize=(10, 12))
img = plt.imread("bayesian_network_domain_knowledge_2.png")
plt.imshow(img)
plt.axis("off")
plt.show()

bn_domain_knowledge = bn